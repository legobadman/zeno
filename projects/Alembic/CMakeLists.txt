file(GLOB ABC_SOURCE *.cpp *.h)

add_library(zalembic SHARED ${ABC_SOURCE})

#target_sources(zeno PRIVATE ${ABC_SOURCE})
zeno_disable_warning(${ABC_SOURCE})

target_include_directories(zalembic PRIVATE .)

option(ZENO_SYSTEM_ALEMBIC "Use Alembic found in system instead of submodule" OFF)
if (0)#ZENO_SYSTEM_ALEMBIC)
    #find_package(Alembic REQUIRED)
    #target_link_libraries(zeno PRIVATE Alembic::Alembic)
else()
    if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/Alembic/CMakeLists.txt)
        message(FATAL_ERROR "Alembic submodule not found! Please run: git submodule update --init --recursive")
    endif()
    #set(ALEMBIC_ILMBASE_LINK_STATIC ON CACHE BOOL FORCE "FKSTATIC")
    #set(ALEMBIC_SHARED_LIBS OFF CACHE BOOL FORCE "FKSTATIC")
    add_subdirectory(Alembic)
    target_link_libraries(zalembic PRIVATE zenocore Alembic)
    #target_link_libraries(zalembic PRIVATE Iex)
    #target_link_libraries(zalembic PRIVATE Imath)
    #target_link_libraries(zalembic PRIVATE IlmThread)
    #target_link_libraries(zalembic PRIVATE OpenEXR)
    target_include_directories(zalembic PRIVATE Alembic/openexr/src/lib/Iex)
    target_include_directories(zalembic PRIVATE Alembic/openexr/src/lib/IlmThread)
    target_include_directories(zalembic PRIVATE Alembic/openexr/src/lib/OpenEXR)
    target_include_directories(zalembic PRIVATE Alembic/openexr/src/lib/OpenEXRCore)
    target_include_directories(zalembic PRIVATE Alembic/openexr/src/lib/OpenEXRUtil)
    target_include_directories(zalembic PRIVATE Alembic/openexr/Imath/src/Imath)
    target_include_directories(zalembic PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/Alembic/openexr/Imath/config)
endif()

find_package(PNG REQUIRED)
target_link_libraries(zalembic PRIVATE PNG::PNG)

#if (ZENO_WITH_PYTHON)
#    find_package(Python3 COMPONENTS Development REQUIRED)
#    target_compile_definitions(zeno PRIVATE -DZENO_WITH_PYTHON)
#    target_link_libraries(zeno PRIVATE ${Python3_LIBRARIES})
#    target_include_directories(zeno PRIVATE ${Python3_INCLUDE_DIRS})
#endif()

#include <zeno/zeno.h>
#include <zeno/types/ListObject_impl.h>
#include <zeno/utils/interfaceutil.h>


namespace zeno
{
    struct Switch : INode
    {
        void apply() override {
            auto input_objects = ZImpl(get_input2<ListObject>("Input Objects"));
            if (!input_objects) {
                throw makeError<UnimplError>("no input objects on Switch");
            }
            int switch_num = ZImpl(get_input2<int>("Switch Number"));
            int n = input_objects->m_impl->size();
            int clip_switch = std::min(n - 1, std::max(0, switch_num));
            zany obj = input_objects->m_impl->get(clip_switch);
            ZImpl(set_output("Output Object", obj));
        }
    };

    ZENDEFNODE(Switch,
    {
        {
            {gParamType_List, "Input Objects"},
            {gParamType_Int, "Switch Number"}
        },
        {
            {gParamType_Geometry, "Output Object"}
        },
        {},
        {"reflect"}
    });

    struct SwitchIf : INode
    {
        CustomUI export_customui() const override {
            CustomUI ui = INode::export_customui();
            ui.uistyle.iconResPath = "<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.22909 22.75C5.72628 22.75 5.24407 22.5503 4.88853 22.1947C4.53299 21.8392 4.33325 21.357 4.33325 20.8542C4.33325 20.3514 4.53299 19.8691 4.88853 19.5136C5.24407 19.1581 5.72628 18.9583 6.22909 18.9583C6.73189 18.9583 7.2141 19.1581 7.56964 19.5136C7.92518 19.8691 8.12492 20.3514 8.12492 20.8542C8.12492 21.357 7.92518 21.8392 7.56964 22.1947C7.2141 22.5503 6.73189 22.75 6.22909 22.75ZM2.70825 20.8542C2.70825 21.788 3.0792 22.6835 3.73948 23.3438C4.39976 24.0041 5.2953 24.375 6.22909 24.375C7.16287 24.375 8.05841 24.0041 8.71869 23.3438C9.37897 22.6835 9.74992 21.788 9.74992 20.8542C9.74992 19.9204 9.37897 19.0248 8.71869 18.3646C8.05841 17.7043 7.16287 17.3333 6.22909 17.3333C5.2953 17.3333 4.39976 17.7043 3.73948 18.3646C3.0792 19.0248 2.70825 19.9204 2.70825 20.8542ZM6.22909 7.04167C5.98012 7.04167 5.73359 6.99263 5.50358 6.89736C5.27357 6.80208 5.06457 6.66243 4.88853 6.48639C4.71248 6.31035 4.57284 6.10135 4.47756 5.87134C4.38229 5.64132 4.33325 5.3948 4.33325 5.14583C4.33325 4.89687 4.38229 4.65034 4.47756 4.42033C4.57284 4.19032 4.71248 3.98132 4.88853 3.80528C5.06457 3.62923 5.27357 3.48959 5.50358 3.39431C5.73359 3.29904 5.98012 3.25 6.22909 3.25C6.73189 3.25 7.2141 3.44974 7.56964 3.80528C7.92518 4.16081 8.12492 4.64303 8.12492 5.14583C8.12492 5.64864 7.92518 6.13085 7.56964 6.48639C7.2141 6.84193 6.73189 7.04167 6.22909 7.04167ZM2.70825 5.14583C2.70825 6.07962 3.0792 6.97515 3.73948 7.63544C4.39976 8.29572 5.2953 8.66667 6.22909 8.66667C7.16287 8.66667 8.05841 8.29572 8.71869 7.63544C9.37897 6.97515 9.74992 6.07962 9.74992 5.14583C9.74992 4.21205 9.37897 3.31651 8.71869 2.65623C8.05841 1.99594 7.16287 1.625 6.22909 1.625C5.2953 1.625 4.39976 1.99594 3.73948 2.65623C3.0792 3.31651 2.70825 4.21205 2.70825 5.14583ZM19.7708 7.04167C19.5218 7.04167 19.2753 6.99263 19.0452 6.89736C18.8152 6.80208 18.6062 6.66243 18.4302 6.48639C18.2542 6.31035 18.1145 6.10135 18.0192 5.87134C17.924 5.64132 17.8749 5.3948 17.8749 5.14583C17.8749 4.89687 17.924 4.65034 18.0192 4.42033C18.1145 4.19032 18.2542 3.98132 18.4302 3.80528C18.6062 3.62923 18.8152 3.48959 19.0452 3.39431C19.2753 3.29904 19.5218 3.25 19.7708 3.25C20.2736 3.25 20.7558 3.44974 21.1113 3.80528C21.4668 4.16081 21.6666 4.64303 21.6666 5.14583C21.6666 5.64864 21.4668 6.13085 21.1113 6.48639C20.7558 6.84193 20.2736 7.04167 19.7708 7.04167ZM16.2499 5.14583C16.2499 6.07962 16.6209 6.97515 17.2811 7.63544C17.9414 8.29572 18.837 8.66667 19.7708 8.66667C20.7045 8.66667 21.6001 8.29572 22.2604 7.63544C22.9206 6.97515 23.2916 6.07962 23.2916 5.14583C23.2916 4.21205 22.9206 3.31651 22.2604 2.65623C21.6001 1.99594 20.7045 1.625 19.7708 1.625C18.837 1.625 17.9414 1.99594 17.2811 2.65623C16.6209 3.31651 16.2499 4.21205 16.2499 5.14583Z\" fill=\"#F25E13\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.22925 18.1459C6.44474 18.1459 6.6514 18.0603 6.80377 17.9079C6.95615 17.7555 7.04175 17.5488 7.04175 17.3334V8.66669C7.04175 8.4512 6.95615 8.24454 6.80377 8.09216C6.6514 7.93979 6.44474 7.85419 6.22925 7.85419C6.01376 7.85419 5.8071 7.93979 5.65472 8.09216C5.50235 8.24454 5.41675 8.4512 5.41675 8.66669V17.3334C5.41675 17.7819 5.78075 18.1459 6.22925 18.1459Z\" fill=\"#F25E13\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.9584 9.47915V8.39581H20.5834V9.47915C20.5834 10.5566 20.1554 11.5899 19.3935 12.3518C18.6317 13.1136 17.5984 13.5416 16.5209 13.5416H8.93758C8.43477 13.5416 7.95256 13.7414 7.59702 14.0969C7.24149 14.4525 7.04175 14.9347 7.04175 15.4375H5.41675C5.41675 14.5037 5.78769 13.6082 6.44798 12.9479C7.10826 12.2876 8.0038 11.9166 8.93758 11.9166H16.5209C17.1674 11.9166 17.7874 11.6598 18.2445 11.2027C18.7016 10.7456 18.9584 10.1256 18.9584 9.47915Z\" fill=\"#F25E13\"/></svg>";
            ui.uistyle.background = "#CEFFB3";
            return ui;
        }

        void apply() override {
            int cond = get_input2_int("Condition");
            if (cond != 0) {
                set_output("Output", get_input("If True"));
            }
            else {
                set_output("Output", get_input("If False"));
            }
        }
    };

    ZENDEFNODE(SwitchIf,
    {
        {
            {gParamType_IObject, "If False"},
            {gParamType_IObject, "If True"},
            {gParamType_Int, "Condition"}
        },
        {
            {gParamType_IObject, "Output"}
        },
        {},
        {"flow"}
    });

    struct SwitchBetween : INode
    {
        CustomUI export_customui() const override {
            CustomUI ui = INode::export_customui();
            ui.uistyle.iconResPath = "<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.22909 22.75C5.72628 22.75 5.24407 22.5503 4.88853 22.1947C4.53299 21.8392 4.33325 21.357 4.33325 20.8542C4.33325 20.3514 4.53299 19.8691 4.88853 19.5136C5.24407 19.1581 5.72628 18.9583 6.22909 18.9583C6.73189 18.9583 7.2141 19.1581 7.56964 19.5136C7.92518 19.8691 8.12492 20.3514 8.12492 20.8542C8.12492 21.357 7.92518 21.8392 7.56964 22.1947C7.2141 22.5503 6.73189 22.75 6.22909 22.75ZM2.70825 20.8542C2.70825 21.788 3.0792 22.6835 3.73948 23.3438C4.39976 24.0041 5.2953 24.375 6.22909 24.375C7.16287 24.375 8.05841 24.0041 8.71869 23.3438C9.37897 22.6835 9.74992 21.788 9.74992 20.8542C9.74992 19.9204 9.37897 19.0248 8.71869 18.3646C8.05841 17.7043 7.16287 17.3333 6.22909 17.3333C5.2953 17.3333 4.39976 17.7043 3.73948 18.3646C3.0792 19.0248 2.70825 19.9204 2.70825 20.8542ZM6.22909 7.04167C5.98012 7.04167 5.73359 6.99263 5.50358 6.89736C5.27357 6.80208 5.06457 6.66243 4.88853 6.48639C4.71248 6.31035 4.57284 6.10135 4.47756 5.87134C4.38229 5.64132 4.33325 5.3948 4.33325 5.14583C4.33325 4.89687 4.38229 4.65034 4.47756 4.42033C4.57284 4.19032 4.71248 3.98132 4.88853 3.80528C5.06457 3.62923 5.27357 3.48959 5.50358 3.39431C5.73359 3.29904 5.98012 3.25 6.22909 3.25C6.73189 3.25 7.2141 3.44974 7.56964 3.80528C7.92518 4.16081 8.12492 4.64303 8.12492 5.14583C8.12492 5.64864 7.92518 6.13085 7.56964 6.48639C7.2141 6.84193 6.73189 7.04167 6.22909 7.04167ZM2.70825 5.14583C2.70825 6.07962 3.0792 6.97515 3.73948 7.63544C4.39976 8.29572 5.2953 8.66667 6.22909 8.66667C7.16287 8.66667 8.05841 8.29572 8.71869 7.63544C9.37897 6.97515 9.74992 6.07962 9.74992 5.14583C9.74992 4.21205 9.37897 3.31651 8.71869 2.65623C8.05841 1.99594 7.16287 1.625 6.22909 1.625C5.2953 1.625 4.39976 1.99594 3.73948 2.65623C3.0792 3.31651 2.70825 4.21205 2.70825 5.14583ZM19.7708 7.04167C19.5218 7.04167 19.2753 6.99263 19.0452 6.89736C18.8152 6.80208 18.6062 6.66243 18.4302 6.48639C18.2542 6.31035 18.1145 6.10135 18.0192 5.87134C17.924 5.64132 17.8749 5.3948 17.8749 5.14583C17.8749 4.89687 17.924 4.65034 18.0192 4.42033C18.1145 4.19032 18.2542 3.98132 18.4302 3.80528C18.6062 3.62923 18.8152 3.48959 19.0452 3.39431C19.2753 3.29904 19.5218 3.25 19.7708 3.25C20.2736 3.25 20.7558 3.44974 21.1113 3.80528C21.4668 4.16081 21.6666 4.64303 21.6666 5.14583C21.6666 5.64864 21.4668 6.13085 21.1113 6.48639C20.7558 6.84193 20.2736 7.04167 19.7708 7.04167ZM16.2499 5.14583C16.2499 6.07962 16.6209 6.97515 17.2811 7.63544C17.9414 8.29572 18.837 8.66667 19.7708 8.66667C20.7045 8.66667 21.6001 8.29572 22.2604 7.63544C22.9206 6.97515 23.2916 6.07962 23.2916 5.14583C23.2916 4.21205 22.9206 3.31651 22.2604 2.65623C21.6001 1.99594 20.7045 1.625 19.7708 1.625C18.837 1.625 17.9414 1.99594 17.2811 2.65623C16.6209 3.31651 16.2499 4.21205 16.2499 5.14583Z\" fill=\"#F25E13\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.22925 18.1459C6.44474 18.1459 6.6514 18.0603 6.80377 17.9079C6.95615 17.7555 7.04175 17.5488 7.04175 17.3334V8.66669C7.04175 8.4512 6.95615 8.24454 6.80377 8.09216C6.6514 7.93979 6.44474 7.85419 6.22925 7.85419C6.01376 7.85419 5.8071 7.93979 5.65472 8.09216C5.50235 8.24454 5.41675 8.4512 5.41675 8.66669V17.3334C5.41675 17.7819 5.78075 18.1459 6.22925 18.1459Z\" fill=\"#F25E13\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.9584 9.47915V8.39581H20.5834V9.47915C20.5834 10.5566 20.1554 11.5899 19.3935 12.3518C18.6317 13.1136 17.5984 13.5416 16.5209 13.5416H8.93758C8.43477 13.5416 7.95256 13.7414 7.59702 14.0969C7.24149 14.4525 7.04175 14.9347 7.04175 15.4375H5.41675C5.41675 14.5037 5.78769 13.6082 6.44798 12.9479C7.10826 12.2876 8.0038 11.9166 8.93758 11.9166H16.5209C17.1674 11.9166 17.7874 11.6598 18.2445 11.2027C18.7016 10.7456 18.9584 10.1256 18.9584 9.47915Z\" fill=\"#F25E13\"/></svg>";
            ui.uistyle.background = "#CEFFB3";
            return ui;
        }

        void apply() override {
            int cond = get_input2_int("cond1");
            if (cond != 0) {
                set_output("Output", get_input("b1"));
                return;
            }

            cond = get_input2_int("cond2");
            if (cond != 0) {
                set_output("Output", get_input("b2"));
                return;
            }

            cond = get_input2_int("cond3");
            if (cond != 0) {
                set_output("Output", get_input("b3"));
                return;
            }

            cond = get_input2_int("cond4");
            if (cond != 0) {
                set_output("Output", get_input("b4"));
                return;
            }

            cond = get_input2_int("cond5");
            if (cond != 0) {
                set_output("Output", get_input("b5"));
                return;
            }

            cond = get_input2_int("cond6");
            if (cond != 0) {
                set_output("Output", get_input("b6"));
                return;
            }

            cond = get_input2_int("cond7");
            if (cond != 0) {
                set_output("Output", get_input("b7"));
                return;
            }

            cond = get_input2_int("cond8");
            if (cond != 0) {
                set_output("Output", get_input("b8"));
                return;
            }
        }
    };

    ZENDEFNODE(SwitchBetween,
    {
        {
            {gParamType_IObject, "b1"},
            {gParamType_IObject, "b2"},
            {gParamType_IObject, "b3"},
            {gParamType_IObject, "b4"},
            {gParamType_IObject, "b5"},
            {gParamType_IObject, "b6"},
            {gParamType_IObject, "b7"},
            {gParamType_IObject, "b8"},
            {gParamType_Int, "cond1", "0"},
            {gParamType_Int, "cond2", "0"},
            {gParamType_Int, "cond3", "0"},
            {gParamType_Int, "cond4", "0"},
            {gParamType_Int, "cond5", "0"},
            {gParamType_Int, "cond6", "0"},
            {gParamType_Int, "cond7", "0"},
            {gParamType_Int, "cond8", "0"},
        },
        {
            {gParamType_IObject, "Output"}
        },
        {},
        {"flow"}
    });
}
